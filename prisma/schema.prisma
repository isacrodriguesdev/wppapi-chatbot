generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Bytes    @id @unique @db.ByteA
  name      String
  phone     String
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  branchs   Branch[]

  @@index([phone])
  @@map("companies")
}

model Branch {
  id          Bytes    @id @unique @db.ByteA
  companyId   Bytes    @map("company_id") @db.ByteA
  active      Boolean  @default(true)
  name        String
  phone       String
  address     String
  coordinates String[] @map("coordinates")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  schedules         Schedule[]
  branchWorkHours   BranchWorkHours[]
  services          Service[]
  employees         Employee[]
  branchDepartments DepartmentBranch[]
  conversations     Conversation[]
  transactions      Transaction[]
  users             User[]
  userRequests      BranchUserRequest[]
  referralPrograms  ReferralProgram[]

  @@index([companyId, phone])
  @@map("branches")
}

model BranchUserRequest {
  id        Bytes    @id @unique @db.ByteA
  branchId  Bytes    @map("branch_id") @db.ByteA
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("branch_user_requests")
}

// Futuramente Ã© possivel fazer um BranchUserRequest

model User {
  id           Bytes     @id @unique @db.ByteA
  phone        String
  name         String?
  email        String?   @unique
  birthDate    DateTime? @map("birth_date")
  profileImage String?   @map("profile_image")
  cpf          String?
  active       Boolean   @default(true)
  roles        String[]  @default(["customer"])
  branchId     Bytes     @map("branch_id") @db.ByteA
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  branch                  Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules               Schedule[]
  conversations           Conversation[]
  employees               Employee[]
  credits                 Credit[]
  referralsAsAffiliates   Referral[]               @relation("AffiliateUser")
  referralsAsReferreds    Referral[]               @relation("ReferredUser")
  conversationAssignments ConversationAssignment[]
  conversationMessages    ConversationMessage[]
  MessageInteraction      MessageInteraction[]
  TransactionUser         TransactionUser[]
  ReferralProgramUser     ReferralProgramUser[]

  @@index([branchId, phone])
  @@map("users")
}

model Department {
  id                Bytes              @id @unique @db.ByteA
  name              String
  departmentBranchs DepartmentBranch[]
  Conversation      Conversation[]

  @@index([name])
  @@map("departments")
}

model DepartmentBranch {
  id           Bytes @id @unique @db.ByteA
  branchId     Bytes @map("branch_id") @db.ByteA
  departmentId Bytes @map("department_id") @db.ByteA

  branch              Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department          Department           @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentEmployees DepartmentEmployee[]

  @@index([branchId, departmentId])
  @@map("department_branches")
}

model DepartmentEmployee {
  id           Bytes    @id @unique @db.ByteA
  departmentId Bytes    @map("department_id") @db.ByteA
  employeeId   Bytes    @map("employee_id") @db.ByteA
  createdAt    DateTime @default(now()) @map("created_at")

  employee   Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department DepartmentBranch @relation(fields: [departmentId], references: [id])

  @@index([departmentId, employeeId])
  @@map("department_employees")
}

model Conversation {
  id           Bytes    @id @unique @db.ByteA
  userId       Bytes    @map("user_id") @db.ByteA
  departmentId Bytes    @map("department_id") @db.ByteA
  branchId     Bytes    @map("branch_id") @db.ByteA
  status       String   @default("open") // open, assigned, closed, done, unresolved, resolved, canceled
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch     Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  assignments ConversationAssignment[]
  messages    ConversationMessage[]

  @@index([userId, departmentId, branchId, status])
  @@map("conversations")
}

model ConversationAssignment {
  id             Bytes    @id @unique @db.ByteA
  conversationId Bytes    @map("conversation_id") @db.ByteA
  userId         Bytes    @map("user_id") @db.ByteA
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([conversationId, userId])
  @@map("conversation_assignments")
}

model ConversationMessage {
  id             Bytes    @id @unique @db.ByteA
  conversationId Bytes    @map("conversation_id") @db.ByteA
  userId         Bytes    @map("user_id") @db.ByteA
  type           String // text, image, video, audio, file
  content        String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([conversationId, userId, type])
  @@map("conversation_messages")
}

model Employee {
  id        Bytes    @id @unique @db.ByteA
  userId    Bytes    @map("user_id") @db.ByteA
  branchId  Bytes    @map("branch_id") @db.ByteA
  phone     String?
  email     String   @unique
  password  String
  deviceId  String?  @map("device_id")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch              Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentEmployees DepartmentEmployee[]
  employeeSchedules   EmployeeSchedule[]

  @@index([userId, email, phone])
  @@map("employees")
}

model Schedule {
  id        Bytes    @id @unique @db.ByteA
  branchId  Bytes    @map("branch_id") @db.ByteA
  userId    Bytes    @map("user_id") @db.ByteA
  serviceId Bytes    @map("service_id") @db.ByteA
  status    String   @default("scheduled")
  date      DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  service           Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch            Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeSchedules EmployeeSchedule[]

  @@index([userId, branchId, serviceId, date])
  @@map("schedules")
}

model EmployeeSchedule {
  id         Bytes @id @unique @db.ByteA
  scheduleId Bytes @map("schedule_id") @db.ByteA
  employeeId Bytes @map("employee_id") @db.ByteA

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([employeeId, scheduleId])
  @@map("employee_schedules")
}

model BranchWorkHours {
  id        Bytes  @id @unique @db.ByteA
  branchId  Bytes  @map("branch_id") @db.ByteA
  weekday   String @map("weekday")
  startTime String @map("start_time")
  endTime   String @map("end_time")
  branch    Branch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([branchId, weekday])
  @@map("branch_work_hours")
}

model Service {
  id                 Bytes                @id @unique @db.ByteA
  branchId           Bytes                @map("branch_id") @db.ByteA
  name               String
  duration           Int                  @default(0)
  price              Float
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  branch             Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules          Schedule[]
  TransactionService TransactionService[]

  @@index([branchId])
  @@map("services")
}

model MessageGroup {
  id         Bytes     @id @unique @db.ByteA
  name       String    @unique
  messages   Message[] @relation("GroupMessages") // Mensagens que pertencem a este grupo
  defaultFor Message[] @relation("DefaultGroup") // Mensagens que usam este grupo como default

  interactions MessageInteraction[]
  options      MessageOption[]

  @@index([name])
  @@map("message_groups")
}

model Action {
  id                  Bytes                 @id @unique @db.ByteA
  name                String
  MessageAction       MessageAction[]
  MessageOptionAction MessageOptionAction[]

  @@index([name])
  @@map("actions")
}

model Message {
  id                 Bytes   @id @unique @db.ByteA
  type               String  @default("text") // text, image, video, audio, file
  groupId            Bytes   @map("group_id") @db.ByteA
  destinationGroupId Bytes?  @map("destination_group_id") @db.ByteA
  bundle             String?
  delay              BigInt  @default(500) // Tempo de espera para enviar a mensagem
  content            String
  sequence           Int // Define a ordem das mensagens

  group                   MessageGroup    @relation("GroupMessages", fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  defaultDestinationGroup MessageGroup?   @relation("DefaultGroup", fields: [destinationGroupId], references: [id])
  options                 MessageOption[]
  actions                 MessageAction[]

  @@index([groupId, sequence, bundle])
  @@map("messages")
}

model MessageAction {
  id        Bytes @id @unique @db.ByteA
  messageId Bytes @map("message_id") @db.ByteA
  actionId  Bytes @map("action_id") @db.ByteA

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  action  Action  @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([messageId, actionId])
  @@map("message_actions")
}

model MessageOption {
  id                 Bytes        @id @unique @db.ByteA
  messageId          Bytes        @map("message_id") @db.ByteA
  destinationGroupId Bytes        @map("destination_group_id") @db.ByteA
  content            String // ConteÃºdo da opÃ§Ã£o ou aÃ§Ã£o
  index              Int
  message            Message      @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group              MessageGroup @relation(fields: [destinationGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  actions MessageOptionAction[]

  @@index([messageId, destinationGroupId, index])
  @@map("message_options")
}

model MessageOptionAction {
  id       Bytes @id @unique @db.ByteA
  optionId Bytes @map("option_id") @db.ByteA
  actionId Bytes @map("action_id") @db.ByteA

  option MessageOption @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  action Action        @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([optionId, actionId])
  @@map("message_option_actions")
}

model MessageInteraction {
  id      Bytes @id @unique @db.ByteA
  groupId Bytes @map("group_id") @db.ByteA
  userId  Bytes @map("user_id") @db.ByteA

  createdAt DateTime @default(now()) @map("created_at")

  group MessageGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([groupId, userId])
  @@map("message_interactions")
}

model ReferralProgram {
  id             Bytes    @id @unique @db.ByteA
  branchId       Bytes    @map("branch_id") @db.ByteA
  newUserBonus   Float    @map("new_user_bonus") // BÃ´nus para novos usuÃ¡rios
  commissionRate Float    @map("commission_rate") // Taxa de comissÃ£o
  expiration     Int      @default(365) @map("expiration")
  active         Boolean  @default(true) // Ativo ou inativo
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  branch               Branch                @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referralProgramUsers ReferralProgramUser[]
  Referral             Referral[]

  @@index([branchId])
  @@map("referral_programs")
}

model ReferralProgramUser {
  id        Bytes    @id @unique @db.ByteA
  code      String   @unique
  programId Bytes    @map("program_id") @db.ByteA // Programa ao qual o cÃ³digo pertence
  userId    Bytes    @map("user_id") @db.ByteA // UsuÃ¡rio que gerou o cÃ³digo
  active    Boolean  @default(true) // CÃ³digo ativo ou inativo
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  program   ReferralProgram @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  affiliate User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([programId, userId, code])
  @@map("referral_program_users")
}

model Referral {
  id             Bytes    @id @unique @db.ByteA
  programId      Bytes    @map("program_id") @db.ByteA // Programa ao qual a indicaÃ§Ã£o pertence
  userId         Bytes    @map("user_id") @db.ByteA // UsuÃ¡rio que fez a indicaÃ§Ã£o
  referredUserId Bytes    @map("referred_user_id") @db.ByteA // UsuÃ¡rio indicado
  expiresAt      DateTime @map("expires_at")
  createdAt      DateTime @default(now()) @map("created_at")

  program      ReferralProgram @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User            @relation("AffiliateUser", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referredUser User            @relation("ReferredUser", fields: [referredUserId], references: [id])

  credits Credit[]

  @@index([programId, referredUserId, userId])
  @@map("referrals")
}

model Credit {
  id         Bytes    @id @unique @db.ByteA
  userId     Bytes    @map("user_id") @db.ByteA
  referralId Bytes    @map("referral_id") @db.ByteA
  amount     Float // Valor dos crÃ©ditos
  type       String // 'earned' ou 'spent'
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referral Referral @relation(fields: [referralId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, referralId, type])
  @@map("credits")
}

model TransactionUser {
  id            Bytes @id @unique @db.ByteA
  transactionId Bytes @map("transaction_id") @db.ByteA
  userId        Bytes @map("user_id") @db.ByteA

  createdAt DateTime @default(now()) @map("created_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, transactionId])
  @@map("transactions_users")
}

model TransactionService {
  id            Bytes @id @unique @db.ByteA
  serviceId     Bytes @map("service_id") @db.ByteA
  transactionId Bytes @map("transaction_id") @db.ByteA

  createdAt DateTime @default(now()) @map("created_at")

  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([serviceId, transactionId])
  @@map("transactions_services")
}

model Transaction {
  id          Bytes    @id @unique @db.ByteA
  branchId    Bytes    @map("branch_id") @db.ByteA
  currency    String   @default("BRL")
  type        String   @default("payment") // payment, refund, withdrawal, deposit
  status      String // pending, completed, canceled
  amount      Float // Valor da transaÃ§Ã£o
  externalId  String? // ID externo para integraÃ§Ãµes com sistemas de pagamento
  description String? // DescriÃ§Ã£o ou nota sobre o pagamento
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  transactionUsers    TransactionUser[]
  transactionServices TransactionService[]
  transactionPayments TransactionPayment[]

  @@index([branchId, status, type])
  @@map("transactions")
}

model TransactionPayment {
  id            Bytes    @id @unique @db.ByteA
  transactionId Bytes    @map("transaction_id") @db.ByteA
  method        String
  createdAt     DateTime @default(now()) @map("created_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([transactionId])
  @@map("transactions_payments")
}
