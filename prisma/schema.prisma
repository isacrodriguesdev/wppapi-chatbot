generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Bytes    @id @unique @db.ByteA
  name      String
  phone     String
  email     String?  @unique
  password  String?
  active    Boolean  @default(true)
  questions String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
  branchs   Branch[]

  @@index([phone])
  @@map("companies")
}

model User {
  id                Bytes              @id @unique @db.ByteA
  name              String
  phone             String
  avatar            String?
  active            Boolean            @default(true)
  companyId         Bytes              @db.ByteA
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules         Schedule[]
  profiles          UserProfile[]
  tickets           Ticket[]
  ticketAssignments TicketAssignment[]
  ticketMessages    TicketMessage[]
  employees         Employee[]

  @@index([companyId, phone])
  @@map("users")
}

model Department {
  id                Bytes              @id @unique @db.ByteA
  name              String
  description       String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  departmentBranchs DepartmentBranch[]
  Ticket            Ticket[]

  @@index([name])
  @@map("departments")
}

model DepartmentBranch {
  id           Bytes    @id @unique @db.ByteA
  branchId     Bytes    @map("branch_id") @db.ByteA
  departmentId Bytes    @map("department_id") @db.ByteA
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  branch              Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department          Department           @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentEmployees DepartmentEmployee[]

  @@index([branchId, departmentId])
  @@map("department_branches")
}

model DepartmentEmployee {
  id           Bytes    @id @unique @db.ByteA
  departmentId Bytes    @map("department_id") @db.ByteA
  employeeId   Bytes    @map("employee_id") @db.ByteA
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  employee   Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department DepartmentBranch @relation(fields: [departmentId], references: [id])

  @@index([departmentId, employeeId])
  @@map("department_employees")
}

model Ticket {
  id           Bytes    @id @unique @db.ByteA
  userId       Bytes    @map("user_id") @db.ByteA
  departmentId Bytes    @map("department_id") @db.ByteA
  branchId     Bytes    @map("branch_id") @db.ByteA
  status       String   @default("open") // open, assigned, closed, done, unresolved, resolved, canceled
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch     Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ticketAssignments TicketAssignment[]
  ticketMessages    TicketMessage[]

  @@index([userId, departmentId, status])
  @@map("tickets")
}

model TicketAssignment {
  id        Bytes    @id @unique @db.ByteA
  ticketId  Bytes    @map("ticket_id") @db.ByteA
  userId    Bytes    @map("user_id") @db.ByteA
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([ticketId, userId])
  @@map("ticket_assignments")
}

model TicketMessage {
  id        Bytes    @id @unique @db.ByteA
  ticketId  Bytes    @map("ticket_id") @db.ByteA
  userId    Bytes    @map("user_id") @db.ByteA
  type      String // text, image, video, audio, file
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([ticketId])
  @@map("ticket_messages")
}

model UserProfile {
  id           Bytes     @id @unique @db.ByteA
  userId       Bytes     @map("user_id") @db.ByteA
  email        String?   @unique
  cpf          String?   @unique
  birthDate    DateTime?
  complement   String?
  street       String?
  neighborhood String?
  number       String?
  zipCode      String?   @map("zip_code")
  city         String?
  state        String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, email, cpf])
  @@map("user_profiles")
}

model Employee {
  id        Bytes    @id @unique @db.ByteA
  userId    Bytes    @map("user_id") @db.ByteA
  branchId  Bytes    @map("branch_id") @db.ByteA
  phone     String?
  email     String?  @unique
  password  String?
  deviceId  String?  @map("device_id")
  active    Boolean  @default(true)
  roles     String[] @default(["employee"])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch              Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules           Schedule[]
  departmentEmployees DepartmentEmployee[]

  @@index([userId, email, phone])
  @@map("employees")
}

model Schedule {
  id         Bytes    @id @unique @db.ByteA
  branchId   Bytes    @map("branch_id") @db.ByteA
  userId     Bytes    @map("user_id") @db.ByteA
  serviceId  Bytes    @map("service_id") @db.ByteA
  employeeId Bytes?   @map("employee_id") @db.ByteA
  status     String   @default("scheduled")
  date       DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  service  Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch   Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, branchId, serviceId, employeeId, date])
  @@map("schedules")
}

model BranchOperatingDay {
  id        Bytes    @id @unique @db.ByteA
  branchId  Bytes    @map("branch_id") @db.ByteA
  weekDay   String   @map("week_day")
  startTime String   @map("start_time")
  endTime   String   @map("end_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([branchId, weekDay])
  @@map("branch_operating_days")
}

model Service {
  id        Bytes      @id @unique @db.ByteA
  branchId  Bytes      @map("branch_id") @db.ByteA
  name      String
  duration  Int?
  price     Float?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  branch    Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules Schedule[]

  @@index([branchId])
  @@map("services")
}

model Branch {
  id                Bytes                @id @unique @db.ByteA
  companyId         Bytes                @map("company_id") @db.ByteA
  active            Boolean              @default(true)
  name              String
  phone             String
  zipCode           String?              @map("zip_code")
  complement        String?              @map("complement")
  state             String?              @map("state")
  city              String?              @map("city")
  geoLocation       String[]             @map("geo_location")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  company           Company              @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  schedules         Schedule[]
  operatingDays     BranchOperatingDay[]
  services          Service[]
  employees         Employee[]
  messages          CustomMessage[]
  branchDepartments DepartmentBranch[]
  tickets           Ticket[]

  @@index([companyId, phone])
  @@map("branches")
}

model PredefinedMessage {
  id        Bytes                     @id @unique @db.ByteA
  name      String
  content   String
  actions   String[]
  group     String?
  createdAt DateTime                  @default(now()) @map("created_at")
  updatedAt DateTime                  @updatedAt @map("updated_at")
  options   PredefinedMessageOption[]

  @@index([name])
  @@map("predefined_messages")
}

model PredefinedMessageOption {
  id        Bytes             @id @unique @db.ByteA
  messageId Bytes             @map("message_id") @db.ByteA
  index     Int
  child     String?
  content   String
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  message   PredefinedMessage @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([messageId])
  @@map("predefined_message_options")
}

model CustomMessage {
  id        Bytes                 @id @unique @db.ByteA
  branchId  Bytes                 @map("branch_id") @db.ByteA
  name      String
  content   String
  group     String?
  actions   String[]
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")
  options   CustomMessageOption[]
  branch    Branch                @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([branchId, name])
  @@map("custom_messages")
}

model CustomMessageOption {
  id        Bytes         @id @unique @db.ByteA
  index     Int
  messageId Bytes         @map("message_id") @db.ByteA
  child     String?
  content   String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  message   CustomMessage @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([messageId])
  @@map("custom_message_options")
}
