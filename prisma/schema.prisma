generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String     @id @unique @default(cuid())
  name      String
  phone     String
  email     String?    @unique // new 
  password  String?
  active    Boolean    @default(true)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  users     User[]
  branchs   Branch[]
  employees Employee[]
  schedules Schedule[]
  services  Service[]

  @@map("companies")
}

model User {
  id        String     @id @unique @default(cuid())
  name      String
  phone     String
  avatar    String?
  email     String?    @unique
  companyId String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules Schedule[]

  @@index([companyId])
  @@map("users")
}

model Employee {
  id        String     @id @unique @default(cuid())
  name      String
  phone     String
  avatar    String?
  email     String?    @unique
  password  String?
  active    Boolean    @default(true)
  roles     String[]   @default(["employee"])
  companyId String     @map("company_id")
  branchId  String     @map("branch_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch    Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules Schedule[]

  @@map("employees")
}

model Schedule {
  id         String    @id @unique @default(cuid())
  status     String    @default("scheduled")
  branchId   String    @map("branch_id")
  userId     String    @map("user_id")
  companyId  String    @map("company_id")
  serviceId  String    @map("service_id")
  employeeId String?   @map("employee_id")
  date       DateTime
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  service    Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branch     Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("schedules")
}

model OperatingDay {
  id        String   @id @unique @default(cuid())
  companyId String   @map("company_id")
  branchId  String   @map("branch_id")
  weekDay   String   @map("week_day")
  startTime String   @map("start_time")
  endTime   String   @map("end_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("operating_days")
}

model Service {
  id        String     @id @unique @default(cuid())
  branchId  String     @map("branch_id")
  companyId String     @map("company_id")
  name      String
  duration  Int?
  price     Float?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  branch    Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules Schedule[]

  @@map("services")
}

// Indicar serviços que são que fazem parte de um pacote exemplo: temos corte de cabelo e barba, e temos um pacote de corte de cabelo e barba no mesmo serviço, temo que ter uma tabela que se o usuario escolher corte de cabelo a opção corte e barba fique desabilitada para escolha

model Branch {
  id            String         @id @unique @default(cuid())
  companyId     String         @map("company_id")
  active        Boolean        @default(true)
  name          String
  phone         String
  zipCode       String?        @map("zip_code")
  complement    String?        @map("complement")
  state         String?        @map("state")
  city          String?        @map("city")
  geoLocation   String[]       @map("geo_location")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schedules     Schedule[]
  operatingDays OperatingDay[]
  services      Service[]
  employees     Employee[]
  messages      Message[]

  @@map("branches")
}

model DefaultMessage {
  id             String                 @id @unique @default(cuid())
  name           String
  content        String
  actions        String[]
  group          String?
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
  messageOptions DefaultMessageOption[]

  @@map("default_messages")
}

model Message {
  id             String          @id @unique @default(cuid())
  branchId       String          @map("branch_id")
  name           String
  content        String
  group          String?
  actions        String[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  messageOptions MessageOption[]
  branch         Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("messages")
}

model MessageOption {
  id        String   @id @unique @default(cuid())
  index     Int
  messageId String   @map("message_id")
  child     String?
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("message_options")
}

model DefaultMessageOption {
  id             String         @id @unique @default(cuid())
  index          Int
  messageId      String         @map("message_id")
  child          String?
  content        String
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  defaultMessage DefaultMessage @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("default_message_options")
}
